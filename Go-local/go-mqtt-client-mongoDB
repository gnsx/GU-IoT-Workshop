/*
 * Copyright (c) 2013 IBM Corp.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Seth Hoenig
 *    Allan Stockdill-Mander
 *    Mike Robertson
 */

package main

import (
	"fmt"
	//"log"
	"os"
	"time"
	"github.com/eclipse/paho.mqtt.golang"
	"gopkg.in/mgo.v2"
	"gopkg.in/mgo.v2/bson"
)

var f mqtt.MessageHandler = func(client mqtt.Client, msg mqtt.Message) {
	fmt.Printf("TOPIC: %s\n", msg.Topic())
	fmt.Printf("MSG: %s\n", msg.Payload())


	mongoCollection := mongoSession.DB("test").C("iot_data")
	message := fmt.Sprintf("%s,%d",msg.Payload(),time.Now().UnixNano())
	err := mongoCollection.Insert(&IOTData{Name: string(msg.Topic()), Value: message, Timestamp: time.Now()})
	if err != nil {
		panic(err)
	}
}

//MongoDBRElated
var (
	IsDrop = true
)

type IOTData struct {
	ID        bson.ObjectId `bson:"_id,omitempty"`
	Name      string
	Value     string
	Timestamp time.Time
}

var mongoSession = &mgo.Session{}

func mqttMongoWorker() {
	//MongoWorker

	session, err := mgo.Dial("localhost:27017")
	if err != nil {
		panic(err)
	}
	defer session.Close()
	session.SetMode(mgo.Monotonic, true)
	if IsDrop {
		err = session.DB("test").DropDatabase()
		if err != nil {
			panic(err)
		}
	}

	mongoCollection := session.DB("test").C("iot_data")
	// Index
	mongoIndex := mgo.Index{
		Key:        []string{"name", "value"},
		Unique:     true,
		DropDups:   true,
		Background: true,
		Sparse:     true,
	}
	err = mongoCollection.EnsureIndex(mongoIndex)
	if err != nil {
		panic(err)
	}

	mongoSession = session
	fmt.Printf("MongoSessionHandledover")
	// Insert Datas
	/*err = mongoCollection.Insert(&IOTData{Name: "Ale", Value: "2.3", Timestamp: time.Now()},
		&IOTData{Name: "Cla", Value: "+66 33 1234 5678", Timestamp: time.Now()})*/
	for i:=0;i<500;i++ {
		if(i==499){
			i=1
		}

	}

}

func main() {
	go mqttMongoWorker()

	time.Sleep(time.Millisecond*1000)
	//mqtt.DEBUG = log.New(os.Stdout, "", 0)
	//mqtt.ERROR = log.New(os.Stdout, "", 0)
	opts := mqtt.NewClientOptions().AddBroker("tcp://localhost:1883").SetClientID("gotrivial")
	opts.SetKeepAlive(2 * time.Second)
	opts.SetDefaultPublishHandler(f)
	opts.SetPingTimeout(1 * time.Second)

	c := mqtt.NewClient(opts)
	if token := c.Connect(); token.Wait() && token.Error() != nil {
		panic(token.Error())
	}

	if token := c.Subscribe("Thing", 0, nil); token.Wait() && token.Error() != nil {
		fmt.Println(token.Error())
		os.Exit(1)
	}

	for i:=0;i<500;i++{
		time.Sleep(time.Millisecond * 5000)
		if(i==499){
			i=1
		}
	}

	for i := 0; i < 5; i++ {
		text := fmt.Sprintf("this is msg #%d!", i)
		token := c.Publish("Thing", 0, false, text)
		token.Wait()
	}

	time.Sleep(6 * time.Second)

	if token := c.Unsubscribe("Thing"); token.Wait() && token.Error() != nil {
		fmt.Println(token.Error())
		os.Exit(1)
	}

	c.Disconnect(250)

	time.Sleep(1 * time.Second)
}
